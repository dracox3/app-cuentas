// =============================================================================
// AUTH SERVICE - SERVICIO DE AUTENTICACI√ìN CON FIREBASE
// =============================================================================

import { 
  signInWithEmailAndPassword,
  createUserWithEmailAndPassword,
  signOut,
  onAuthStateChanged,
  updateProfile,
  sendPasswordResetEmail,
  sendEmailVerification,
  GoogleAuthProvider,
  signInWithPopup,
  linkWithCredential,
  unlink,
  updatePassword
} from 'firebase/auth';
import { getAuth } from '../core/firebase.js';
import { state } from '../core/state.js';

// =============================================================================
// CLASE DEL SERVICIO DE AUTENTICACI√ìN
// =============================================================================

class AuthService {
  constructor() {
    this.auth = null;
    this.currentUser = null;
    this.authStateListeners = new Set();
    this.isInitialized = false;
    
    // Bindear m√©todos
    this.handleAuthStateChange = this.handleAuthStateChange.bind(this);
    this.initialize = this.initialize.bind(this);
  }
  
  /**
   * Inicializa el servicio de autenticaci√≥n
   */
  async initialize() {
    try {
      console.log('üîê Inicializando servicio de autenticaci√≥n...');
      
      // Obtener instancia de Auth
      this.auth = getAuth();
      
      // Configurar listener de cambios de estado
      onAuthStateChanged(this.auth, this.handleAuthStateChange);
      
      this.isInitialized = true;
      console.log('‚úÖ Servicio de autenticaci√≥n inicializado');
      
    } catch (error) {
      console.error('‚ùå Error al inicializar servicio de autenticaci√≥n:', error);
      throw error;
    }
  }
  
  /**
   * Maneja los cambios en el estado de autenticaci√≥n
   * @param {Object} user - Usuario de Firebase o null
   */
  handleAuthStateChange(user) {
    try {
      console.log('üîÑ Cambio en estado de autenticaci√≥n:', user ? 'Usuario autenticado' : 'Usuario no autenticado');
      
      this.currentUser = user;
      
      // Actualizar estado global
      state.setUser(user);
      
      // Notificar a todos los listeners
      this.authStateListeners.forEach(listener => {
        try {
          listener(user);
        } catch (error) {
          console.error('‚ùå Error en listener de autenticaci√≥n:', error);
        }
      });
      
    } catch (error) {
      console.error('‚ùå Error al manejar cambio de estado de autenticaci√≥n:', error);
    }
  }
  
  /**
   * Registra un listener para cambios en el estado de autenticaci√≥n
   * @param {Function} callback - Funci√≥n a ejecutar cuando cambie el estado
   * @returns {Function} Funci√≥n para remover el listener
   */
  onAuthStateChanged(callback) {
    if (typeof callback !== 'function') {
      console.warn('‚ö†Ô∏è onAuthStateChanged requiere una funci√≥n como callback');
      return () => {};
    }
    
    this.authStateListeners.add(callback);
    
    // Ejecutar callback inmediatamente si ya hay un usuario
    if (this.currentUser) {
      callback(this.currentUser);
    }
    
    // Retornar funci√≥n para remover el listener
    return () => {
      this.authStateListeners.delete(callback);
    };
  }
  
  /**
   * Inicia sesi√≥n con email y contrase√±a
   * @param {string} email - Email del usuario
   * @param {string} password - Contrase√±a del usuario
   * @returns {Promise<Object>} Usuario autenticado
   */
  async signInWithEmailAndPassword(email, password) {
    try {
      if (!this.isInitialized) {
        throw new Error('Servicio de autenticaci√≥n no inicializado');
      }
      
      if (!email || !password) {
        throw new Error('Email y contrase√±a son requeridos');
      }
      
      console.log('üîë Iniciando sesi√≥n con email:', email);
      
      const userCredential = await signInWithEmailAndPassword(this.auth, email, password);
      const user = userCredential.user;
      
      console.log('‚úÖ Sesi√≥n iniciada correctamente:', user.email);
      
      return user;
      
    } catch (error) {
      console.error('‚ùå Error al iniciar sesi√≥n:', error);
      
      // Traducir errores de Firebase a mensajes en espa√±ol
      const errorMessage = this.translateFirebaseError(error.code);
      throw new Error(errorMessage);
    }
  }
  
  /**
   * Crea una nueva cuenta con email y contrase√±a
   * @param {string} email - Email del usuario
   * @param {string} password - Contrase√±a del usuario
   * @param {string} displayName - Nombre para mostrar (opcional)
   * @returns {Promise<Object>} Usuario creado
   */
  async createUserWithEmailAndPassword(email, password, displayName = null) {
    try {
      if (!this.isInitialized) {
        throw new Error('Servicio de autenticaci√≥n no inicializado');
      }
      
      if (!email || !password) {
        throw new Error('Email y contrase√±a son requeridos');
      }
      
      console.log('üë§ Creando nueva cuenta con email:', email);
      
      const userCredential = await createUserWithEmailAndPassword(this.auth, email, password);
      const user = userCredential.user;
      
      // Actualizar perfil si se proporciona displayName
      if (displayName) {
        await updateProfile(user, { displayName });
        console.log('‚úÖ Perfil actualizado con displayName:', displayName);
      }
      
      // Enviar email de verificaci√≥n
      await sendEmailVerification(user);
      console.log('üìß Email de verificaci√≥n enviado');
      
      console.log('‚úÖ Cuenta creada correctamente:', user.email);
      
      return user;
      
    } catch (error) {
      console.error('‚ùå Error al crear cuenta:', error);
      
      // Traducir errores de Firebase a mensajes en espa√±ol
      const errorMessage = this.translateFirebaseError(error.code);
      throw new Error(errorMessage);
    }
  }
  
  /**
   * Cierra la sesi√≥n del usuario actual
   * @returns {Promise<void>}
   */
  async signOut() {
    try {
      if (!this.isInitialized) {
        throw new Error('Servicio de autenticaci√≥n no inicializado');
      }
      
      if (!this.currentUser) {
        console.log('‚ÑπÔ∏è No hay usuario autenticado para cerrar sesi√≥n');
        return;
      }
      
      console.log('üö™ Cerrando sesi√≥n de:', this.currentUser.email);
      
      await signOut(this.auth);
      
      console.log('‚úÖ Sesi√≥n cerrada correctamente');
      
    } catch (error) {
      console.error('‚ùå Error al cerrar sesi√≥n:', error);
      
      const errorMessage = this.translateFirebaseError(error.code);
      throw new Error(errorMessage);
    }
  }

  /**
   * Actualiza el nombre a mostrar del usuario actual
   * @param {string} displayName
   */
  async updateDisplayName(displayName) {
    try {
      if (!this.isInitialized) throw new Error('Servicio de autenticaci√≥n no inicializado');
      if (!this.currentUser) throw new Error('No hay usuario');
      await updateProfile(this.currentUser, { displayName: displayName || '' });
      // Refrescar referencia local y estado global
      this.currentUser = { ...this.currentUser, displayName };
      state.setUser(this.currentUser);
      console.log('‚úÖ Display name actualizado');
    } catch (error) {
      console.error('‚ùå Error al actualizar display name:', error);
      throw error;
    }
  }

  /**
   * Inicia sesi√≥n con Google
   * @returns {Promise<Object>} Usuario autenticado
   */
  async signInWithGoogle() {
    try {
      if (!this.isInitialized) {
        throw new Error('Servicio de autenticaci√≥n no inicializado');
      }
      
      console.log('üîë Iniciando sesi√≥n con Google...');
      
      const provider = new GoogleAuthProvider();
      
      // Configurar scopes adicionales si es necesario
      provider.addScope('email');
      provider.addScope('profile');
      
      const userCredential = await signInWithPopup(this.auth, provider);
      const user = userCredential.user;
      
      console.log('‚úÖ Sesi√≥n iniciada con Google:', user.email);
      
      return user;
      
    } catch (error) {
      console.error('‚ùå Error al iniciar sesi√≥n con Google:', error);
      
      const errorMessage = this.translateFirebaseError(error.code);
      throw new Error(errorMessage);
    }
  }

  /**
   * Cambia la contrase√±a del usuario actual (requiere login reciente)
   * @param {string} newPassword
   */
  async changePassword(newPassword) {
    try {
      if (!this.isInitialized) throw new Error('Servicio de autenticaci√≥n no inicializado');
      if (!this.currentUser) throw new Error('No hay usuario');
      if (!newPassword || newPassword.length < 6) throw new Error('La contrase√±a debe tener al menos 6 caracteres');
      await updatePassword(this.currentUser, newPassword);
      console.log('‚úÖ Contrase√±a actualizada');
    } catch (error) {
      console.error('‚ùå Error al cambiar contrase√±a:', error);
      throw error;
    }
  }

  /**
   * Env√≠a email de restablecimiento de contrase√±a al usuario actual
   */
  async sendPasswordReset() {
    try {
      if (!this.isInitialized) throw new Error('Servicio de autenticaci√≥n no inicializado');
      if (!this.currentUser || !this.currentUser.email) throw new Error('No hay email asociado');
      await sendPasswordResetEmail(this.auth, this.currentUser.email);
      console.log('üìß Email de restablecimiento enviado');
    } catch (error) {
      console.error('‚ùå Error al enviar email de restablecimiento:', error);
      throw error;
    }
  }
  
  /**
   * Env√≠a email para restablecer contrase√±a
   * @param {string} email - Email del usuario
   * @returns {Promise<void>}
   */
  async sendPasswordResetEmail(email) {
    try {
      if (!this.isInitialized) {
        throw new Error('Servicio de autenticaci√≥n no inicializado');
      }
      
      if (!email) {
        throw new Error('Email es requerido');
      }
      
      console.log('üìß Enviando email de restablecimiento de contrase√±a a:', email);
      
      await sendPasswordResetEmail(this.auth, email);
      
      console.log('‚úÖ Email de restablecimiento enviado');
      
    } catch (error) {
      console.error('‚ùå Error al enviar email de restablecimiento:', error);
      
      const errorMessage = this.translateFirebaseError(error.code);
      throw new Error(errorMessage);
    }
  }
  
  /**
   * Env√≠a email de verificaci√≥n
   * @returns {Promise<void>}
   */
  async sendEmailVerification() {
    try {
      if (!this.isInitialized) {
        throw new Error('Servicio de autenticaci√≥n no inicializado');
      }
      
      if (!this.currentUser) {
        throw new Error('No hay usuario autenticado');
      }
      
      console.log('üìß Enviando email de verificaci√≥n a:', this.currentUser.email);
      
      await sendEmailVerification(this.currentUser);
      
      console.log('‚úÖ Email de verificaci√≥n enviado');
      
    } catch (error) {
      console.error('‚ùå Error al enviar email de verificaci√≥n:', error);
      
      const errorMessage = this.translateFirebaseError(error.code);
      throw new Error(errorMessage);
    }
  }
  
  /**
   * Actualiza el perfil del usuario
   * @param {Object} profileData - Datos del perfil a actualizar
   * @returns {Promise<void>}
   */
  async updateProfile(profileData) {
    try {
      if (!this.isInitialized) {
        throw new Error('Servicio de autenticaci√≥n no inicializado');
      }
      
      if (!this.currentUser) {
        throw new Error('No hay usuario autenticado');
      }
      
      if (!profileData || typeof profileData !== 'object') {
        throw new Error('Datos del perfil inv√°lidos');
      }
      
      console.log('‚úèÔ∏è Actualizando perfil del usuario:', this.currentUser.email);
      
      await updateProfile(this.currentUser, profileData);
      
      console.log('‚úÖ Perfil actualizado correctamente');
      
    } catch (error) {
      console.error('‚ùå Error al actualizar perfil:', error);
      
      const errorMessage = this.translateFirebaseError(error.code);
      throw new Error(errorMessage);
    }
  }
  
  /**
   * Obtiene el usuario actual
   * @returns {Object|null} Usuario actual o null
   */
  getCurrentUser() {
    return this.currentUser;
  }
  
  /**
   * Verifica si hay un usuario autenticado
   * @returns {boolean} True si hay usuario autenticado
   */
  isAuthenticated() {
    return this.currentUser !== null;
  }
  
  /**
   * Verifica si el usuario actual est√° verificado
   * @returns {boolean} True si el usuario est√° verificado
   */
  isEmailVerified() {
    return this.currentUser ? this.currentUser.emailVerified : false;
  }
  
  /**
   * Obtiene el token de ID del usuario actual
   * @returns {Promise<string|null>} Token de ID o null
   */
  async getIdToken() {
    try {
      if (!this.currentUser) {
        return null;
      }
      
      return await this.currentUser.getIdToken();
      
    } catch (error) {
      console.error('‚ùå Error al obtener token de ID:', error);
      return null;
    }
  }
  
  /**
   * Obtiene el token de ID con refresh forzado
   * @param {boolean} forceRefresh - Forzar refresh del token
   * @returns {Promise<string|null>} Token de ID o null
   */
  async getIdTokenResult(forceRefresh = false) {
    try {
      if (!this.currentUser) {
        return null;
      }
      
      return await this.currentUser.getIdTokenResult(forceRefresh);
      
    } catch (error) {
      console.error('‚ùå Error al obtener resultado del token de ID:', error);
      return null;
    }
  }
  
  /**
   * Traduce errores de Firebase a mensajes en espa√±ol
   * @param {string} errorCode - C√≥digo de error de Firebase
   * @returns {string} Mensaje de error traducido
   */
  translateFirebaseError(errorCode) {
    const errorMessages = {
      // Errores de autenticaci√≥n
      'auth/user-not-found': 'No existe una cuenta con este email',
      'auth/wrong-password': 'Contrase√±a incorrecta',
      'auth/invalid-email': 'Email inv√°lido',
      'auth/user-disabled': 'Esta cuenta ha sido deshabilitada',
      'auth/too-many-requests': 'Demasiados intentos fallidos. Intenta m√°s tarde',
      'auth/operation-not-allowed': 'Esta operaci√≥n no est√° permitida',
      'auth/weak-password': 'La contrase√±a es demasiado d√©bil',
      'auth/email-already-in-use': 'Ya existe una cuenta con este email',
      'auth/invalid-credential': 'Credenciales inv√°lidas',
      'auth/account-exists-with-different-credential': 'Ya existe una cuenta con credenciales diferentes',
      'auth/credential-already-in-use': 'Estas credenciales ya est√°n en uso',
      'auth/operation-not-supported-in-this-environment': 'Operaci√≥n no soportada en este entorno',
      'auth/timeout': 'Tiempo de espera agotado',
      'auth/network-request-failed': 'Error de red. Verifica tu conexi√≥n',
      
      // Errores de popup
      'auth/popup-closed-by-user': 'Ventana de autenticaci√≥n cerrada por el usuario',
      'auth/popup-blocked': 'Ventana de autenticaci√≥n bloqueada por el navegador',
      'auth/cancelled-popup-request': 'Solicitud de popup cancelada',
      
      // Errores de verificaci√≥n
      'auth/requires-recent-login': 'Se requiere un login reciente para esta operaci√≥n',
      'auth/user-token-expired': 'Token de usuario expirado',
      
      // Errores generales
      'auth/internal-error': 'Error interno del servidor',
      'auth/invalid-api-key': 'Clave de API inv√°lida',
      'auth/app-not-authorized': 'Aplicaci√≥n no autorizada',
      'auth/key-expired': 'Clave expirada',
      'auth/invalid-user-token': 'Token de usuario inv√°lido',
      'auth/user-mismatch': 'Usuario no coincide',
      'auth/invalid-tenant-id': 'ID de inquilino inv√°lido',
      'auth/unsupported-tenant-operation': 'Operaci√≥n de inquilino no soportada',
      'auth/invalid-verification-code': 'C√≥digo de verificaci√≥n inv√°lido',
      'auth/invalid-verification-id': 'ID de verificaci√≥n inv√°lido',
      'auth/missing-verification-code': 'C√≥digo de verificaci√≥n faltante',
      'auth/missing-verification-id': 'ID de verificaci√≥n faltante',
      'auth/quota-exceeded': 'Cuota excedida',
      'auth/retry-limit-exceeded': 'L√≠mite de reintentos excedido',
      'auth/invalid-phone-number': 'N√∫mero de tel√©fono inv√°lido',
      'auth/missing-phone-number': 'N√∫mero de tel√©fono faltante',
      'auth/invalid-recaptcha-token': 'Token de reCAPTCHA inv√°lido',
      'auth/missing-recaptcha-token': 'Token de reCAPTCHA faltante',
      'auth/invalid-recaptcha-action': 'Acci√≥n de reCAPTCHA inv√°lida',
      'auth/missing-recaptcha-action': 'Acci√≥n de reCAPTCHA faltante',
      'auth/invalid-recaptcha-score': 'Puntuaci√≥n de reCAPTCHA inv√°lida',
      'auth/missing-recaptcha-score': 'Puntuaci√≥n de reCAPTCHA faltante',
      'auth/invalid-recaptcha-response': 'Respuesta de reCAPTCHA inv√°lida',
      'auth/missing-recaptcha-response': 'Respuesta de reCAPTCHA faltante',
      'auth/invalid-recaptcha-secret': 'Secreto de reCAPTCHA inv√°lido',
      'auth/missing-recaptcha-secret': 'Secreto de reCAPTCHA faltante',
      'auth/invalid-recaptcha-version': 'Versi√≥n de reCAPTCHA inv√°lida',
      'auth/missing-recaptcha-version': 'Versi√≥n de reCAPTCHA faltante',
      'auth/invalid-recaptcha-site-key': 'Clave del sitio de reCAPTCHA inv√°lida',
      'auth/missing-recaptcha-site-key': 'Clave del sitio de reCAPTCHA faltante',
      'auth/invalid-recaptcha-domain': 'Dominio de reCAPTCHA inv√°lido',
      'auth/missing-recaptcha-domain': 'Dominio de reCAPTCHA faltante',
      'auth/invalid-recaptcha-action': 'Acci√≥n de reCAPTCHA inv√°lida',
      'auth/missing-recaptcha-action': 'Acci√≥n de reCAPTCHA faltante',
      'auth/invalid-recaptcha-score': 'Puntuaci√≥n de reCAPTCHA inv√°lida',
      'auth/missing-recaptcha-score': 'Puntuaci√≥n de reCAPTCHA faltante',
      'auth/invalid-recaptcha-response': 'Respuesta de reCAPTCHA inv√°lida',
      'auth/missing-recaptcha-response': 'Respuesta de reCAPTCHA faltante',
      'auth/invalid-recaptcha-secret': 'Secreto de reCAPTCHA inv√°lido',
      'auth/missing-recaptcha-secret': 'Secreto de reCAPTCHA faltante',
      'auth/invalid-recaptcha-version': 'Versi√≥n de reCAPTCHA inv√°lida',
      'auth/missing-recaptcha-version': 'Versi√≥n de reCAPTCHA faltante',
      'auth/invalid-recaptcha-site-key': 'Clave del sitio de reCAPTCHA inv√°lida',
      'auth/missing-recaptcha-site-key': 'Clave del sitio de reCAPTCHA faltante',
      'auth/invalid-recaptcha-domain': 'Dominio de reCAPTCHA inv√°lido',
      'auth/missing-recaptcha-domain': 'Dominio de reCAPTCHA faltante'
    };
    
    return errorMessages[errorCode] || `Error de autenticaci√≥n: ${errorCode}`;
  }
  
  /**
   * Limpia el servicio y remueve todos los listeners
   */
  destroy() {
    try {
      this.authStateListeners.clear();
      this.isInitialized = false;
      this.currentUser = null;
      
      console.log('üóëÔ∏è Servicio de autenticaci√≥n destruido');
      
    } catch (error) {
      console.error('‚ùå Error al destruir servicio de autenticaci√≥n:', error);
    }
  }
}

// =============================================================================
// INSTANCIA SINGLETON DEL SERVICIO
// =============================================================================

// Crear instancia √∫nica del servicio
const authService = new AuthService();

// Exportar la instancia
export { authService };
